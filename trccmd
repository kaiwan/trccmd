#!/bin/bash
# https://github.com/kaiwan/trccmd/
#
# A simple wrapper over the useful trace-cmd front-end to ftrace.
# It uses the function_graph plugin.. records the session, generates the
# binary <cmd>_trc.dat file as well as a human-readable 'report' file,
# typically under /tmp/trc.txt.
# 
# As an additional feature, the binary data file generated by trace-cmd(1),
# can be imported into the Trace Compass GUI and better visualized.
# Details here: using_tracecompass_gui_with_trccmd.txt
# (online: https://github.com/kaiwan/L5_debug_trg/blob/master/kernel_debug/tracing/ftrace/using_tracecompass_gui_with_trccmd.txt)
#
# (c) Kaiwan N Billimoria, kaiwanTECH
# License: MIT
name=$(basename "$0")

[ "$(id -u)" -eq 0 ] && {
 echo "${name}: Please don't run as root."
 exit 1
}
CONFIG=~/.local/trccmd.config
if [ ! -f ${CONFIG} ] ; then
   echo "${name}: very first run (?), installing trccmd config file ...
(to ${CONFIG})"
   cp ./trccmd.config ~/.local/
fi
source ${CONFIG} || {
 echo "${name}: fatal: could not source file '${CONFIG}', aborting...
(Please ensure you 'git clone' the full repo to get the config file as well!)"
 exit 1
}

usage()
{
   echo "Usage: ${name} [program-to-ftrace-via-trace-cmd]
 Eg. sudo ./${name} ps -LA
 NOTE: this will perform an _exclusive_ ftrace of the provided app (ps in the above eg).
If no program is provided as an argument, we shall trace-cmd(1) whatever's running.

Additionally, if you want to *see all function parameters and their runtime values*
(useful!), ensure the variable SHOW_PARAMETERS is set to 1 in the config file
${CONFIG} (check it out, useful stuff)."
}


## "main" here

if [ $# -ge 1 ] ; then
 if [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
   usage
   exit 0
 fi
fi

# TODO - update to check for tracefs fs
echo "[+] Checking for ftrace support ..."
sudo mount |grep -q -w debugfs || {
 echo "${name}: debugfs filesystem not mounted? Aborting..."
 exit 2
}
TRCMNT=$(sudo mount |grep -w debugfs |awk '{print $3}')
export TRCMNT=${TRCMNT}/tracing
sudo ls ${TRCMNT} >/dev/null 2>&1
if [ $? -ne 0 ] ; then
 echo "${name}: ${TRCMNT} not pseudo-file not available? Aborting..."
 exit 2
fi
echo " [OK] (ftrace loc: ${TRCMNT})"

echo -n "[+] Checking for trace-cmd with function_graph plugin support, pl wait ..."
which trace-cmd >/dev/null 2>&1 || {
  echo "${name}: trace-cmd not installed (or not in PATH)?"
  exit 1
}
#-------------- test for the 'function_graph' plugin support
mv trace.dat trace.dat.bkp 2>/dev/null
sudo trace-cmd record -p function_graph -l kmem_cache_alloc -F true / >/dev/null 2>&1 || {
  echo "${name}: trace-cmd didn't work with the function-graph plugin, aborting..."
  exit 2
}
sudo rm -f trace.dat 2>/dev/null
mv trace.dat.bkp trace.dat 2>/dev/null
echo " [OK]"

#------------------ RECORD
TRC_FILE_BINARY=trc.dat
[ $# -ge 1 ] && TRC_FILE_BINARY=$(basename "$1")_trc.dat
#echo "TRC_FILE_BINARY = ${TRC_FILE_BINARY}"

OPTS_RECORD="-o "${TRC_FILE_BINARY}""
[ ${QUIET_MODE} -eq 1 ] && OPTS_RECORD="${OPTS_RECORD} -q"
if [ ${SHOW_PARAMETERS} -eq 1 ] ; then
  echo "
  Recording: showing parameters and their runtime values; will lose function-graph...
  "
  OPTS_RECORD="${OPTS_RECORD} -e all"
else
  OPTS_RECORD="${OPTS_RECORD} -p function_graph"
fi

echo "[+] Recording now ...(binary ftrace file is ${TRC_FILE_BINARY}; [options: \"${OPTS_RECORD}\"]
<< it can take a while, be patient ...
Also, hit Ctrl^C just once to abort recording >>"
if [ $# -ge 1 ] ; then
  sudo trace-cmd record ${OPTS_RECORD} -c -F "$@"
   # -F: trace only this executable
   # -c: ...along with it's children, if any
else
  sudo trace-cmd record ${OPTS_RECORD}
fi

[ $? -ne 0 ] && {
  echo "${name}: 'trace-cmd record' failed, aborting ..."
  exit 4
}
ls "${TRC_FILE_BINARY}" >/dev/null || {
  echo "${name}: 'trace-cmd record' failed, no binary trace file, aborting ..."
  exit 5
}
sudo chown ${USER}:${USER} ${TRC_FILE_BINARY}

#------------------ REPORT
echo "[+] Generating the trace-cmd report now ..."
echo -n "    Note: report done in latency format"
OPTS_REPORT="-l -i "${TRC_FILE_BINARY}""
 # -l : adds a "latency output" format
 # -i : input file spec
[ ${QUIET_MODE} -eq 1 ] && OPTS_REPORT="${OPTS_REPORT} -q"
[ ${DONT_REPORT_IRQCTX} -eq 1 ] && {
  echo ", *leaving out* interrupt contexts"
  OPTS_REPORT="${OPTS_REPORT} -I -S"
}

trace-cmd report ${OPTS_REPORT} > ${TRC_FILE}
[ $? -ne 0 ] && {
    echo "${name}: 'trace-cmd report' failed, aborting ..."
    exit 6
}
echo "[+] Done"  #, report: ${TRC_FILE}"

echo "
trace-cmd report file: ${TRC_FILE}
$(ls -lh ${TRC_FILE})

Additionally:
The binary data file generated by trace-cmd, here [${TRC_FILE_BINARY}]:
    $(ls -lh "${TRC_FILE_BINARY}")
can be imported into the Trace Compass GUI and better visualized.
Details here: using_tracecompass_gui_with_trccmd.txt
(online: https://github.com/kaiwan/L5_debug_trg/blob/master/kernel_debug/tracing/ftrace/using_tracecompass_gui_with_trccmd.txt)
"
exit 0
